[{"class": "article-title", "content": "Creating a REST API to get real-time data from the Euronext Paris stock exchange"}, {"class": "date", "content": "November 14, 2022"}, {"class": "text", "content": "I had the idea to create a web application that would allow me to easily visualise my stock wallet online. I started looking for a free API that would give me real-time or delayed information about the Euronext stock exchange. Sadly I couldn\u2019t find any free API that would satisfy my needs (they were all heavily restricted or paid). So I decided to create my own. It will be useful if I ever want to create my web app."}, {"class": "title", "content": "The fonctionalities"}, {"class": "text", "content": "This API has 3 roles. It has access to a database of all the companies listed on the Euronext Paris stock exchange. Based on that, it can provide information on any company when given either their name, symbol, or isin ID. Secondly, it can provide real-time information on the value of any stock, with additional data (opening price, highest and lowest price, vwap...). Finally it can access historical data, up to the creation of the stock."}, {"class": "subtitle", "content": "/company : Get information on a listed company"}, {"class": "text", "content": "On the market, a company can be identified by its name, its symbol (often a shortened version of its name), or its unique isin ID. When given one, the API will return a JSON object containing the rest of them. The following examples return the same result :"}, {"class": "text", "content": "/ /company?symbol=STM"}, {"class": "text", "content": "/ /company?name=STMICROELECTRONICS"}, {"class": "text", "content": "/ /company?isin=NL0000226223"}, {"class": "text", "content": "/ JSON answer"}, {"class": "subtitle", "content": "/stock : Get real-time information on a stock"}, {"class": "text", "content": "By specifying a company the same way as above, the API will return a JSON object containing the current value of the stock, as well as a lot of additional data."}, {"class": "text", "content": "/ /stock?symbol=MC"}, {"class": "text", "content": "/ JSON answer"}, {"class": "subtitle", "content": "/stock/chart : Get historical data on a stock"}, {"class": "text", "content": "The API can also return historical data on a stock, namely the last values of the stock, the dates, and the volumes. A new parameter 'period' is added, and can take 2 value : 'intraday' (default) or 'max'. The first one will return minute-by-minute data for the last 5 days, while the second one will return daily data for as long as the stock has been listed."}, {"class": "text", "content": "/ /stock/chart?symbol=AIR #implicit period=intraday"}, {"class": "text", "content": "/ JSON answer (sample)"}, {"class": "title", "content": "How it works"}, {"class": "text", "content": "The API works by mimicking the requests made by the Euronext website. To do that, I navigated the website and used the developer tools to see what requests were made. I only kept the relevant ones and send them myself to the Euronext servers."}, {"class": "text", "content": "The app is built in Python using the Flask framework. I used the 'requests' library to send the requests to the Euronext servers, and the 'BeautifulSoup' library to parse the HTML responses. The companies are stored in a SQLite database."}, {"class": "subtitle", "content": "Getting the list of companies from the website"}, {"class": "text", "content": "To this day, there are 1,760 companies on the Eurnoext markets. I only want to reference companies that are on the Euronext Paris stock exchange, and tradable from Paris (430 in total). This is done via a POST request, by adding a JSON object that acts as a filter. The response is a list of HTML text, which is then parsed to extract the relevant information."}, {"class": "text", "content": "/ Code euronext_paris_stock_list get()"}, {"class": "subtitle", "content": "The companies database"}, {"class": "text", "content": "The list of companies can be subject to change, but this is very rare. Hence, to avoid fetching it every time the API is called, it is stored in a database. The database is created when the app is first launched, and updated every 24 hours. This speeds up the calls."}, {"class": "subtitle", "content": "Getting historical information on a stock from the website"}, {"class": "text", "content": "To fetch the historical prices of a stock, the API makes a GET request to the following URL:"}, {"class": "text", "content": "/ https://live.euronext.com/intraday_chart/getChartData/{isin}-{market}/{period}"}, {"class": "text", "content": "This call needs 3 arguments, the isin, the period, and the market on which the stock is listed (which for some reason is not always 'XPAR', but can be 'XBRU' or 'XAMS'). This is where the database is useful, as it contains the isin and the market for each company."}, {"class": "text", "content": "The response is a JSON object containing a list of dictionaries, each one containing the date, the value, and the volume of the stock. The API then returns the same object, which is already perfectly readable."}, {"class": "subtitle", "content": "Getting real-time information on a stock from the website"}, {"class": "text", "content": "The most important data is the current value of the stock. To get it, the API uses the same method as above, but only keeps the last value."}, {"class": "text", "content": "The other detailed information is obtained by making a GET request to the following URL:"}, {"class": "text", "content": "/ \"https://live.euronext.com/en/intraday_chart/getDetailedQuoteAjax/{isin}-{market}/full"}, {"class": "text", "content": "The response is an HTML table, which is parsed to extract the relevant information. The API then returns a JSON object containing everything that was read."}, {"class": "title", "content": "Handling errors"}, {"class": "text", "content": "In my API, requests can fail for multiple reasons. That is why errors are generated and brought to the user's attention. The following errors can occur :"}, {"class": "text", "content": "- 400 : Bad request. The request is not formatted correctly."}, {"class": "text", "content": "- 404 : Not found. The company does not exist in the database."}, {"class": "text", "content": "- 502 : Bad gateway. The request to the Euronext servers failed for some reason."}, {"class": "text", "content": "Here is a diagram I made to guide my programming. It shows the different steps of the API, and the different errors that can occur:"}, {"class": "image", "source": "image_diagram.png", "content": "The logic of the API"}, {"class": "title", "content": "Conclusion"}, {"class": "text", "content": "I am very happy with the result. The API is reliable, quite fast (considering it makes requests to other servers and not only to the local database), and easy to use. I will probably use it in the future to create my web app. I don't plan on deploying it yet, as it is not very useful for the moment. But if you want to use it, you can find the code on my GitHub."}]