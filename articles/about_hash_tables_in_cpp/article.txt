About the hash table data structure and its implementation in C++.
October 31, 2022

When handling large amounts of data, storing them in a list or an array is no longer a viable option. Finding or removing a given element takes more and more time. This is where hash tables come in: no matter the size of the data set, the time it takes to find or remove an element is constant. In this article, we will look at how hash tables work and go over an implementation in C++.

#title How do hash tables work?
A hash table is simply an array in which elements are added one after the other. However, they are not appened to the end of the array, but rather to a specific index, determined using the hash function.
An element of the hash table must have two fields: a key and a value. The key is fed to the hash function, which returns an index. The element is then stored in the array at this index. That way, when the user wants to find an element, he only has to provide the key, and will be able to retrieve the value in constant time.

#subtitle Resolving collisions
All hash functions are deterministic, which means that for a given key, the hash function will always return the same index. However, it is possible that two different keys will return the same index. This is called a collision. This means that multiple elements can be stored at the same index. When this happens, the hash table must be able to handle it.
There are several ways to handle collisions. The one we will use here is called chaining. When a collision occurs, the element is stored in a linked list at the index of the collision. When the user searches for this element, the program will iterate through the linked list until it finds the element with the correct key. This admittedly takes more time than a simple array, but the lists are so short that it can still be considered constant time.

#subtitle Making the right choices


#end